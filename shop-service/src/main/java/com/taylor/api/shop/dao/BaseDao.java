package com.taylor.api.shop.dao;

import java.util.List;
import java.util.Map;


/**
 * @notes：数据库公共类Dao类接口
 * @param <T>
 * @author taylor
 *
 *         2014-4-3 下午1:47:05
 */
public interface BaseDao<T> {

    public String getDao4MapperPackage();

    /**
     * 方法描述:插入信息并返回对应的Id
     *
     * @param sql 插入的SQL
     * @param tablename 插入SQL对应的表名
     * @author fei 2014-4-6 下午10:28:03
     */
    public Long insertRtnId(String sql, String tablename);

    /**
     * 方法描述:根据传入的SQL，返回查询的对象（只返回一行记录） <调用commonMapper中的NewSelectBySql实现>
     *
     * @param sql SQL<sql查询的结果必须是一行结果否则会出错>
     * @author fei 2014-4-6 下午10:39:24
     */
    public Object selectOne4SQL(String sql);

    /**
     * 方法描述:根据传入的sql，返回查询结果的Map结构列表 <调用commonMapper中的NewMapSelectBySql实现>
     *
     * @param sql 查询SQL
     * @author fei 2014-4-6 下午10:48:26
     */
    @SuppressWarnings("rawtypes")
    public List selectMapList4SQL(String sql);

    /**
     * 方法描述:根据传入的sql，返回一条查询结果记录的Map结构列表 <调用commonMapper中的NewMapSelectBySql实现>
     *
     * @param sql 查询SQL
     * @author fei 2014-4-6 下午11:11:42
     */
    @SuppressWarnings("rawtypes")
    public Map selectOneMap4SQL(String sql);

    /**
     * 方法描述:带事务的，根据sql添加数据 <调用commonMapper中的NewInsertBySql实现>
     *
     * @param sql
     * @author fei 2014-4-6 下午10:53:55
     */
    public void insert4SQL(String sql);

    /**
     * 方法描述:带事务处理的通用update方法，根据传入的Sql更新 <调用commonMapper中的NewUpdateBySql实现>
     *
     * @param sql
     * @author fei 2014-4-6 下午10:57:18
     */
    public void update4SQL(String sql);

    /**
     * 方法描述:带事务处理的通用update方法，返回更新成功记录数，根据传入的Sql更新 <调用commonMapper中的NewUpdateBySql实现>
     * 
     * @param sql 更新数据的sql
     * @author fei 2014-4-6 下午10:59:33
     */
    public int update4SQLRtnUpNum(String sql);

    /**
     * 方法描述:带事务处理的，通用根据SQL删除数据方法
     *
     * @param sql 传入通用方法的SQL
     * @author fei 2014-4-6 下午11:04:46
     */
    public void delete4SQL(String sql);

    /**
     * 方法描述:带事务处理的，自定义SQL Mapper 删除 数据方法
     *
     * @param sqlaliasname sql alias name<SQL别名>
     * @param T 参数对象
     * @author fei 2014-4-6 下午11:13:09
     */
    public int delete(String sqlaliasname, T t);

    /**
     * 方法描述:带事务处理的，自定义SQL Mapper 添加 数据方法
     *
     * @param sqlaliasname sql alias name<SQL别名>
     * @param T 参数对象
     * @author fei 2014-4-6 下午11:13:09
     */
    public int insert(String sqlaliasname, T t);

    /**
     * 方法描述:更新 数据方法，带事务处理的，自定义根据sqlaliasname对应SQL Mapper对应语句
     *
     * @param sqlaliasname sql alias name<SQL别名>
     * @param T 参数对象
     * @author fei 2014-4-6 下午11:14:34
     */
    public int update(String sqlaliasname, T t);

    /**
     * 方法描述:自定义根据sqlaliasname对应SQL Mapper对应语句，查询单个对象的方法
     *
     * @param sqlaliasname sql alias name<SQL别名>
     * @param T 参数对象
     * @author fei 2014-4-6 下午11:16:40
     */
    public Object selectOne(String sqlaliasname, T t);

    /**
     * 方法描述:批量添加方法
     *
     * @param sqlaliasname SQL Mapper 别名
     * @param list 添加对象List
     * @author fei 2014-4-6 下午11:50:31
     */
    public boolean batchInsert(String sqlaliasname, List<T> list);

    /**
     * 方法描述:批量修改方法
     *
     * @param sqlaliasname SQL Mapper 别名
     * @param list 添加对象List
     * @author fei 2014-4-6 下午11:50:31
     */
    public boolean batchUpdate(String sqlaliasname, List<T> list);

    /**
     * 方法描述:批量删除方法
     *
     * @param sqlaliasname SQL Mapper 别名
     * @param list 添加对象List
     * @author fei 2014-4-6 下午11:50:31
     */
    public boolean batchDelete(String sqlaliasname, List<T> list);


    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table
     * ielts_admin_user
     *
     * @mbggenerated Tue Jan 13 20:14:48 CST 2015
     */
    public int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table
     * ielts_admin_user
     *
     * @mbggenerated Tue Jan 13 20:14:48 CST 2015
     */
    public int insert(T t);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table
     * ielts_admin_user
     *
     * @mbggenerated Tue Jan 13 20:14:48 CST 2015
     */
    public int insertSelective(T t);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table
     * ielts_admin_user
     *
     * @mbggenerated Tue Jan 13 20:14:48 CST 2015
     */
    public T selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table
     * ielts_admin_user
     *
     * @mbggenerated Tue Jan 13 20:14:48 CST 2015
     */
    public int updateByPrimaryKeySelective(T t);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table
     * ielts_admin_user
     *
     * @mbggenerated Tue Jan 13 20:14:48 CST 2015
     */
    public int updateByPrimaryKey(T t);
}
